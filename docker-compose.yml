## ReportPortal common variables
##

## @section Logging configuration
## @param x-logging Common logging settings for all services (json-file driver with rotation)
##
x-logging: &logging
  driver: "json-file"
  options:
    max-size: 100m
    max-file: "5"

## @section Database configuration
## @param x-database Common DB config shared across all services
## @param db_host Hostname of the PostgreSQL database
## @param db_port Port to connect to PostgreSQL
## @param db_user Username for PostgreSQL access
## @param db_password Password for PostgreSQL access
## @param db_name Database name to connect to
##
x-database:
  db_host: &db_host postgres
  db_port: &db_port 5432
  db_user: &db_user ${POSTGRES_USER-rpuser}
  db_password: &db_password ${POSTGRES_PASSWORD-rppass}
  db_name: &db_name ${POSTGRES_DB-reportportal}

## @section AMQP (RabbitMQ) configuration
## @param x-amqp Common RabbitMQ config shared across all services
## @param rabbitmq_host RabbitMQ hostname
## @param rabbitmq_port AMQP communication port
## @param rabbitmq_apiport RabbitMQ HTTP management UI port
## @param rabbitmq_user RabbitMQ user
## @param rabbitmq_password RabbitMQ password
##
x-amqp:
  rabbitmq_host: &rabbitmq_host rabbitmq
  rabbitmq_port: &rabbitmq_port 5672
  rabbitmq_apiport: &rabbitmq_apiport 15672
  rabbitmq_user: &rabbitmq_user ${RABBITMQ_DEFAULT_USER-rabbitmq}
  rabbitmq_password: &rabbitmq_password ${RABBITMQ_DEFAULT_PASS-rabbitmq}

## @section Common environment variables
## @param x-environment Common environment values injected into core services
##
x-environment: &common-environment
  RP_DB_HOST: *db_host
  RP_DB_PORT: *db_port
  RP_DB_USER: *db_user
  RP_DB_PASS: *db_password
  RP_DB_NAME: *db_name
  RP_AMQP_HOST: *rabbitmq_host
  RP_AMQP_PORT: *rabbitmq_port
  RP_AMQP_APIPORT: *rabbitmq_apiport
  RP_AMQP_USER: *rabbitmq_user
  RP_AMQP_PASS: *rabbitmq_password
  RP_AMQP_APIUSER: *rabbitmq_user
  RP_AMQP_APIPASS: *rabbitmq_password
  RP_AMQP_ANALYZER-VHOST: analyzer
  DATASTORE_TYPE: filesystem

## @section Analyzer service environment
## @param x-analyzer-environment Custom env vars for analyzer services
##
x-analyzer-environment: &common-analyzer-environment
  LOGGING_LEVEL: info
  AMQP_EXCHANGE_NAME: analyzer-default
  AMQP_VIRTUAL_HOST: analyzer
  AMQP_URL: amqp://${RABBITMQ_DEFAULT_USER-rabbitmq}:${RABBITMQ_DEFAULT_PASS-rabbitmq}@rabbitmq:5672
  ES_HOSTS: http://opensearch:9200 
  ANALYZER_BINARYSTORE_TYPE: filesystem

services:
  ##
  ## @section ReportPortal dependencies
  ##

  ## @param gateway Reverse proxy and entry point for ReportPortal
  ## - Port 8080: exposes the ReportPortal UI
  ## - Port 8081: exposes the Traefik dashboard
  ## - Uses Docker labels to auto-discover services
  ##
  gateway:
    image: traefik:v2.11.15
    logging:
      <<: *logging
    ports:
      - "8080:8080"   ## ReportPortal UI
      - "8081:8081"   ## Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - --providers.docker=true
      - --providers.docker.constraints=Label(`traefik.expose`, `true`)
      - --entrypoints.web.address=:8080
      - --entrypoints.traefik.address=:8081
      - --api.dashboard=true
      - --api.insecure=true
    networks:
      - reportportal
    restart: always
    profiles:
      - core         ## Part of core services
      - infra        ## Also needed for infrastructure setup
      - ''           ## Default profile

  ## @param postgres Main PostgreSQL database for ReportPortal
  ## - Uses Bitnami image with volume for persistent storage
  ## - Healthcheck ensures DB is ready before dependent services start
  ## - Expose port 5432 if needed (currently commented out)
  ##
  postgres:
    image: bitnami/postgresql:16.6.0
    container_name: *db_host
    logging:
      <<: *logging
    shm_size: '512m'
    environment:
      POSTGRES_USER: *db_user
      POSTGRES_PASSWORD: *db_password
      POSTGRES_DB: *db_name
    volumes:
      - postgres:/bitnami/postgresql
    # ports:
    #   - "5432:5432"   ## Uncomment to expose PostgreSQL externally
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 120s
      retries: 10
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - infra
      - ''

  ## @param rabbitmq Message broker for asynchronous communication
  ## - Supports queues for test analysis and reporting
  ## - Healthcheck ensures availability before dependent services start
  ## - Plugins included: shovel, management, LDAP, etc.
  ## - Expose ports 5672 (AMQP) and 15672 (Web UI) if needed
  ##
  rabbitmq:
    image: bitnami/rabbitmq:3.13.7-debian-12-r5
    logging:
      <<: *logging
    # ports:
    #   - "5672:5672"     ## Uncomment to expose AMQP protocol port
    #   - "15672:15672"   ## Uncomment to expose RabbitMQ dashboard
    environment:
      RABBITMQ_DEFAULT_USER: *rabbitmq_user
      RABBITMQ_DEFAULT_PASS: *rabbitmq_password
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: "true"
      RABBITMQ_DISK_FREE_ABSOLUTE_LIMIT: 50MB
      RABBITMQ_PLUGINS: >
        rabbitmq_consistent_hash_exchange
        rabbitmq_management
        rabbitmq_auth_backend_ldap
        rabbitmq_shovel
        rabbitmq_shovel_management
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - infra
      - ''

  ## @param opensearch Search and analytics engine used by the Analyzer service
  ## - Runs as a single node with security plugins disabled
  ## - Volume maps persistent data for reuse across restarts
  ## - Ports 9200 (API) and 9600 (metrics) can be exposed if needed
  ##
  opensearch:
    image: opensearchproject/opensearch:2.18.0
    logging:
      <<: *logging
    environment:
      discovery.type: single-node
      plugins.security.disabled: "true"
      bootstrap.memory_lock: "true"
      OPENSEARCH_JAVA_OPTS: -Xms512m -Xmx512m
      DISABLE_INSTALL_DEMO_CONFIG: "true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # ports:
    #   - "9200:9200"  ## OpenSearch HTTP API
    #   - "9600:9600"  ## OpenSearch Performance Analyzer
    volumes:
      - opensearch:/usr/share/opensearch/data
    healthcheck:
      test: ["CMD", "curl","-s" ,"-f", "http://0.0.0.0:9200/_cat/health"]
    networks:
      - reportportal
    restart: always
    profiles:
      - ''  ## Runs in default profile (used by analyzer services)

  ##
  ## @section ReportPortal Core Services
  ##

  ## @param migrations Initializes and applies DB schema changes
  ## - Runs on startup and exits on completion
  ## - Depends on PostgreSQL being healthy
  ##
  migrations:
    image: ${MIGRATIONS_IMAGE-reportportal/migrations:5.13.2}
    build: ./migrations
    logging:
      <<: *logging
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_SERVER: *db_host
      POSTGRES_PORT: *db_port
      POSTGRES_DB: *db_name
      POSTGRES_USER: *db_user
      POSTGRES_PASSWORD: *db_password
    networks:
      - reportportal
    restart: on-failure
    profiles:
      - core
      - infra
      - ''

  ## @param index ReportPortal indexing service
  ## - Registers and manages test data indexing
  ## - Exposed via Traefik at root URL `/`
  ## - Healthcheck validates service availability on port 8080
  ##
  index:
    image: ${INDEX_IMAGE-reportportal/service-index:5.13.1}
    build: ./service-index
    logging:
      <<: *logging
    depends_on:
      gateway:
        condition: service_started
    environment:
      LB_URL: http://gateway:8081
      TRAEFIK_V2_MODE: 'true'
    healthcheck:
      test: wget -q --spider http://0.0.0.0:8080/health
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 10s
    labels:
      - "traefik.http.routers.index.rule=PathPrefix(`/`)"
      - "traefik.http.routers.index.service=index"
      - "traefik.http.services.index.loadbalancer.server.port=8080"
      - "traefik.http.services.index.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - infra
      - ''
      
   ## @param ui ReportPortal web UI service
  ## - Serves the frontend web interface on port 8080
  ## - Routed via Traefik under path `/ui`
  ## - Healthcheck ensures UI is up before marking container healthy
  ##
  ui:
    image: ${UI_IMAGE-reportportal/service-ui:5.12.5}
    build: ./service-ui
    environment:
      RP_SERVER_PORT: "8080"
    healthcheck:
      test: wget -q --spider http://0.0.0.0:8080/health
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 10s
    labels:
      - "traefik.http.middlewares.ui-strip-prefix.stripprefix.prefixes=/ui"
      - "traefik.http.routers.ui.middlewares=ui-strip-prefix@docker"
      - "traefik.http.routers.ui.rule=PathPrefix(`/ui`)"
      - "traefik.http.routers.ui.service=ui"
      - "traefik.http.services.ui.loadbalancer.server.port=8080"
      - "traefik.http.services.ui.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - ''

  ## @param api Main backend service for ReportPortal
  ## - Exposes business logic, REST API, and handles background jobs
  ## - Depends on PostgreSQL, RabbitMQ, and Traefik (gateway)
  ## - Healthcheck runs on port 8585
  ## - Routed via Traefik under path `/api`
  ##
  api:
    image: ${API_IMAGE-reportportal/service-api:5.13.5}
    build: ./service-api
    logging:
      <<: *logging
    depends_on:
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      <<: *common-environment
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: info
      RP_REQUESTLOGGING: "false"
      AUDIT_LOGGER: "OFF"
      MANAGEMENT_HEALTH_ELASTICSEARCH_ENABLED: "false"
      RP_ENVIRONMENT_VARIABLE_ALLOW_DELETE_ACCOUNT: "false"
      JAVA_OPTS: >
        -Xmx1g 
        -XX:+HeapDumpOnOutOfMemoryError 
        -XX:HeapDumpPath=/tmp  
        -Dcom.sun.management.jmxremote.rmi.port=12349 
        -Dcom.sun.management.jmxremote 
        -Dcom.sun.management.jmxremote.local.only=false  
        -Dcom.sun.management.jmxremote.port=9010 
        -Dcom.sun.management.jmxremote.authenticate=false 
        -Dcom.sun.management.jmxremote.ssl=false 
        -Djava.rmi.server.hostname=0.0.0.0
      RP_JOBS_BASEURL: http://jobs:8686
      COM_TA_REPORTPORTAL_JOB_INTERRUPT_BROKEN_LAUNCHES_CRON: PT1H
      RP_ENVIRONMENT_VARIABLE_PATTERN-ANALYSIS_BATCH-SIZE: 100
      RP_ENVIRONMENT_VARIABLE_PATTERN-ANALYSIS_PREFETCH-COUNT: 1
      RP_ENVIRONMENT_VARIABLE_PATTERN-ANALYSIS_CONSUMERS-COUNT: 1
      COM_TA_REPORTPORTAL_JOB_LOAD_PLUGINS_CRON: PT10S
      COM_TA_REPORTPORTAL_JOB_CLEAN_OUTDATED_PLUGINS_CRON: PT10S
      REPORTING_QUEUES_COUNT: 10
      REPORTING_CONSUMER_PREFETCHCOUNT: 10
      REPORTING_PARKINGLOT_TTL_DAYS: 7
    volumes:
      - storage:/data/storage
    healthcheck:
      test: curl -f http://0.0.0.0:8585/health
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 60s
    labels:
      - "traefik.http.middlewares.api-strip-prefix.stripprefix.prefixes=/api"
      - "traefik.http.routers.api.middlewares=api-strip-prefix@docker"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8585"
      - "traefik.http.services.api.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - ''

  ## @param uat Authorization and authentication service
  ## - Handles login, sessions, and permissions
  ## - First-time admin password defined via RP_INITIAL_ADMIN_PASSWORD
  ## - Routed via Traefik under `/uat`
  ## - Depends on PostgreSQL
  ##
  uat:
    image: ${UAT_IMAGE-reportportal/service-authorization:5.13.2}
    build: ./service-authorization
    logging:
      <<: *logging
    environment:
      <<: *common-environment
      RP_SESSION_LIVE: 86400                      ## Session duration in seconds (1 day)
      RP_SAML_SESSION-LIVE: 4320                  ## SAML session duration in seconds (~1.2 hours)
      RP_INITIAL_ADMIN_PASSWORD: ${RP_INITIAL_ADMIN_PASSWORD:-erebus}
      JAVA_OPTS: >
        -Djava.security.egd=file:/dev/./urandom
        -XX:MinRAMPercentage=60.0
        -XX:MaxRAMPercentage=90.0
        --add-opens=java.base/java.lang=ALL-UNNAMED
    volumes:
      - storage:/data/storage
    healthcheck:
      test: curl -f http://0.0.0.0:9999/health
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 60s
    labels:
      - "traefik.http.middlewares.uat-strip-prefix.stripprefix.prefixes=/uat"
      - "traefik.http.routers.uat.middlewares=uat-strip-prefix@docker"
      - "traefik.http.routers.uat.rule=PathPrefix(`/uat`)"
      - "traefik.http.routers.uat.service=uat"
      - "traefik.http.services.uat.loadbalancer.server.port=9999"
      - "traefik.http.services.uat.loadbalancer.server.scheme=http"
      - "traefik.expose=true"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - ''


   ## @param jobs Background job processor for ReportPortal
  ## - Executes scheduled cleanup, notification, and maintenance tasks
  ## - Healthcheck on port 8686 ensures it’s alive before usage
  ## - Routed via Traefik under `/jobs`
  ##
  jobs:
    image: ${JOBS_IMAGE-reportportal/service-jobs:5.13.2}
    build: ./service-jobs
    logging:
      <<: *logging
    depends_on:
      rabbitmq:
        condition: service_healthy
      gateway:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      << : *common-environment
      RP_ENVIRONMENT_VARIABLE_CLEAN_ATTACHMENT_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_LOG_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_LAUNCH_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_STORAGE_CRON: 0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_STORAGE_PROJECT_CRON: 0 */5 * * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_EXPIREDUSER_CRON:  0 0 */24 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_EXPIREDUSER_RETENTIONPERIOD: 365
      RP_ENVIRONMENT_VARIABLE_NOTIFICATION_EXPIREDUSER_CRON: 0 0 */24 * * * 
      RP_ENVIRONMENT_VARIABLE_CLEAN_EVENTS_RETENTIONPERIOD: 365
      RP_ENVIRONMENT_VARIABLE_CLEAN_EVENTS_CRON: 0 30 05 * * *
      RP_ENVIRONMENT_VARIABLE_CLEAN_STORAGE_CHUNKSIZE: 20000
      RP_PROCESSING_LOG_MAXBATCHSIZE: 2000
      RP_PROCESSING_LOG_MAXBATCHTIMEOUT: 6000
      RP_AMQP_MAXLOGCONSUMER: 1
      JAVA_OPTS: >
        -Djava.security.egd=file:/dev/./urandom
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -XX:G1ReservePercent=20
        -XX:InitiatingHeapOccupancyPercent=60
        -XX:MaxRAMPercentage=70.0
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/tmp
    volumes:
      - storage:/data/storage
    healthcheck:
      test: curl -f http://0.0.0.0:8686/health || exit 1
      interval: 60s
      timeout: 30s
      retries: 10
      start_period: 60s
    labels:
      - traefik.http.middlewares.jobs-strip-prefix.stripprefix.prefixes=/jobs
      - traefik.http.routers.jobs.middlewares=jobs-strip-prefix@docker
      - traefik.http.routers.jobs.rule=PathPrefix(`/jobs`)
      - traefik.http.routers.jobs.service=jobs
      - traefik.http.services.jobs.loadbalancer.server.port=8686
      - traefik.http.services.jobs.loadbalancer.server.scheme=http
      - traefik.expose=true
    networks:
      - reportportal
    restart: always
    profiles:
      - core
      - ''

  ##
  ## @section Analyzer stack
  ## Analyzer services (optional): auto-analysis and ML training
  ##

  ## @param analyzer Automatic test result analyzer
  ## - Consumes test data and performs log pattern matching
  ## - Requires OpenSearch and RabbitMQ to function
  ##
  analyzer:
    image: &analyzer_image ${ANALYZER_IMAGE-reportportal/service-auto-analyzer:5.13.2}
    build: &analyzer_build ./service-auto-analyzer
    logging:
      <<: *logging
    environment:
      <<: *common-analyzer-environment
    volumes:
      - storage:/backend/storage
    depends_on:
      opensearch:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - reportportal
    restart: always
    profiles:
      - ''  ## Not included in 'core' by default

  ## @param analyzer-train ML training component of the analyzer
  ## - Runs training tasks for improving pattern recognition
  ## - Shares image and build context with main analyzer
  ##
  analyzer-train:
    image: *analyzer_image
    build: *analyzer_build
    logging:
      <<: *logging
    environment:
      <<: *common-analyzer-environment
      INSTANCE_TASK_TYPE: train
      UWSGI_WORKERS: 1
    volumes:
      - storage:/backend/storage
    depends_on:
      opensearch:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - reportportal
    restart: always
    profiles:
      - ''

##
## @section Volumes
## Named volumes for persistent data storage
##
volumes:
  opensearch:   ## Persistent data for OpenSearch
  storage:      ## Shared storage for API, UAT, Jobs, Analyzer
  postgres:     ## PostgreSQL database volume

##
## @section Networks
## Custom Docker network for ReportPortal service discovery
##
networks:
  reportportal:
